class VoiceChat {
    constructor() {
        this.ws = null;
        this.mediaRecorder = null;
        this.audioContext = null;
        this.analyser = null;
        this.audioChunks = [];
        this.isRecording = false;
        this.isConnected = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.initElements();
        this.initWebSocket();
        this.initVisualizer();
        
        console.log('VoiceChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initElements() {
        // –ü–æ–ª—É—á–∞–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.statusEl = document.getElementById('status');
        this.statusText = document.getElementById('statusText');
        this.startBtn = document.getElementById('startBtn');
        this.stopBtn = document.getElementById('stopBtn');
        this.messagesEl = document.getElementById('messages');
        this.canvas = document.getElementById('visualizer');
        this.canvasCtx = this.canvas.getContext('2d');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.startBtn.addEventListener('click', () => this.startListening());
        this.stopBtn.addEventListener('click', () => this.stopListening());
        
        console.log('DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    initWebSocket() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL WebSocket
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;
        
        console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
        
        this.ws = new WebSocket(wsUrl);

        this.ws.onopen = () => {
            console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            this.isConnected = true;
            this.updateStatus('connected', '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É!');
        };

        this.ws.onmessage = (event) => {
            console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket');
            try {
                const data = JSON.parse(event.data);
                this.handleMessage(data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket:', error);
            }
        };

        this.ws.onclose = () => {
            console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
            this.isConnected = false;
            this.updateStatus('disconnected', '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ');
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (!this.isConnected) {
                    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                    this.initWebSocket();
                }
            }, 3000);
        };

        this.ws.onerror = (error) => {
            console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
            this.updateStatus('error', '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        };
    }

    initVisualizer() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
        this.canvas.width = 400;
        this.canvas.height = 100;
        
        // –†–∏—Å—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.drawVisualizerIdle();
    }

    updateStatus(status, text) {
        this.statusEl.className = `status ${status}`;
        this.statusText.textContent = text;
        console.log('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', status, text);
    }

    async startListening() {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å...');
        
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const stream = await navigator.mediaDevices.getUserMedia({ 
                audio: {
                    channelCount: 1,     // –ú–æ–Ω–æ
                    echoCancellation: false,  // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ö–æ-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
                    noiseSuppression: false,  // –û—Ç–∫–ª—é—á–∞–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ  
                    autoGainControl: false    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—É—Å–∏–ª–µ–Ω–∏–µ
                } 
            });

            console.log('–î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            this.analyser = this.audioContext.createAnalyser();
            this.analyser.fftSize = 256;
            
            const source = this.audioContext.createMediaStreamSource(stream);
            source.connect(this.analyser);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º media recorder
            const mimeType = this.getSupportedMimeType();
            
            this.mediaRecorder = new MediaRecorder(stream, {
                mimeType: mimeType
            });

            this.audioChunks = [];
            
            this.mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    this.audioChunks.push(event.data);
                    console.log('–ó–∞–ø–∏—Å–∞–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫:', event.data.size, '–±–∞–π—Ç');
                }
            };

            this.mediaRecorder.onstop = () => {
                console.log('–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
                this.processRecording();
            };

            this.mediaRecorder.onerror = (event) => {
                console.error('–û—à–∏–±–∫–∞ MediaRecorder:', event.error);
                this.updateStatus('error', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏');
            };

            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            this.mediaRecorder.start(); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω –±–ª–æ–∫
            this.isRecording = true;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.startBtn.disabled = true;
            this.stopBtn.disabled = false;
            this.updateStatus('listening', 'üé§ –°–ª—É—à–∞—é... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å!');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            this.startVisualization();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:', error);
            
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. ';
            if (error.name === 'NotAllowedError') {
                errorMessage += '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
            } else if (error.name === 'NotFoundError') {
                errorMessage += '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.';
            } else {
                errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.';
            }
            
            alert(errorMessage);
            this.updateStatus('error', '‚ùå –û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞');
        }
    }

    getSupportedMimeType() {
        const types = [
            'audio/webm;codecs=opus',
            'audio/webm',
            'audio/wav',
            'audio/mp4',
            'audio/mpeg'
        ];
        
        for (const type of types) {
            if (MediaRecorder.isTypeSupported(type)) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º MIME —Ç–∏–ø:', type);
                return type;
            }
        }
        
        console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π MIME —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º default');
        return '';
    }

    stopListening() {
        console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...');
        
        if (this.mediaRecorder && this.isRecording) {
            this.mediaRecorder.stop();
            this.isRecording = false;
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
            if (this.mediaRecorder.stream) {
                this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.startBtn.disabled = false;
            this.stopBtn.disabled = true;
            this.updateStatus('processing', '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –≥–æ–ª–æ—Å...');
        }
    }

    async processRecording() {
        if (this.audioChunks.length === 0) {
            console.log('–ù–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            this.updateStatus('connected', '‚ùå –ê—É–¥–∏–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ');
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ blob
            const audioBlob = new Blob(this.audioChunks, { type: 'audio/webm' });
            console.log('–°–æ–∑–¥–∞–Ω –∞—É–¥–∏–æ blob:', audioBlob.size, '–±–∞–π—Ç');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            const arrayBuffer = await audioBlob.arrayBuffer();
            const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
            
            console.log('–ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, –¥–ª–∏–Ω–∞:', base64Audio.length);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                this.ws.send(JSON.stringify({
                    type: 'audio_data',
                    audio: base64Audio
                }));
            } else {
                console.error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.updateStatus('error', '‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
            this.updateStatus('error', '‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
        }
    }

    handleMessage(data) {
        console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type);
        
        switch (data.type) {
            case 'connection':
                console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', data.message);
                break;
                
            case 'transcription':
                console.log('–ü–æ–ª—É—á–µ–Ω–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:', data.text);
                this.addMessage('user', data.text);
                this.updateStatus('processing', 'ü§ñ –ò–ò –¥—É–º–∞–µ—Ç...');
                break;
                
            case 'audio_response':
                console.log('–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç');
                this.addMessage('assistant', data.text);
                if (data.audio) {
                    this.playAudio(data.audio);
                }
                this.updateStatus('connected', '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!');
                break;
                
            case 'error':
                console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
                this.addMessage('system', `–û—à–∏–±–∫–∞: ${data.message}`);
                this.updateStatus('connected', '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
                break;
                
            case 'pong':
                console.log('–ü–æ–ª—É—á–µ–Ω pong');
                break;
                
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
        }
    }

    addMessage(sender, text) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${sender}`;
        
        const contentEl = document.createElement('div');
        contentEl.className = 'message-content';
        contentEl.textContent = text;
        
        messageEl.appendChild(contentEl);
        this.messagesEl.appendChild(messageEl);
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
        this.messagesEl.scrollTop = this.messagesEl.scrollHeight;
        
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', sender, text);
    }

    async playAudio(base64Audio) {
        try {
            console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç...');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ array buffer
            const audioData = atob(base64Audio);
            const arrayBuffer = new ArrayBuffer(audioData.length);
            const view = new Uint8Array(arrayBuffer);
            
            for (let i = 0; i < audioData.length; i++) {
                view[i] = audioData.charCodeAt(i);
            }

            // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
            const source = audioContext.createBufferSource();
            source.buffer = audioBuffer;
            source.connect(audioContext.destination);
            source.start();
            
            console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞—á–∞—Ç–æ');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
            
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML5 audio —ç–ª–µ–º–µ–Ω—Ç
            try {
                const audioBlob = new Blob([atob(base64Audio)], { type: 'audio/mpeg' });
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);
                await audio.play();
                
                // –û—á–∏—â–∞–µ–º
                audio.onended = () => URL.revokeObjectURL(audioUrl);
                
            } catch (fallbackError) {
                console.error('–†–µ–∑–µ—Ä–≤–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å:', fallbackError);
            }
        }
    }

    startVisualization() {
        if (!this.analyser || !this.isRecording) return;

        const bufferLength = this.analyser.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        const draw = () => {
            if (!this.isRecording) {
                this.drawVisualizerIdle();
                return;
            }

            requestAnimationFrame(draw);

            this.analyser.getByteFrequencyData(dataArray);

            // –û—á–∏—â–∞–µ–º canvas
            this.canvasCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            this.canvasCtx.fillStyle = '#f8f9fa';
            this.canvasCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);

            const barWidth = (this.canvas.width / bufferLength) * 2.5;
            let barHeight;
            let x = 0;

            // –†–∏—Å—É–µ–º —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã
            for (let i = 0; i < bufferLength; i++) {
                barHeight = (dataArray[i] / 255) * this.canvas.height * 0.8;

                // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
                const gradient = this.canvasCtx.createLinearGradient(0, this.canvas.height, 0, this.canvas.height - barHeight);
                gradient.addColorStop(0, '#007bff');
                gradient.addColorStop(1, '#667eea');
                
                this.canvasCtx.fillStyle = gradient;
                this.canvasCtx.fillRect(x, this.canvas.height - barHeight, barWidth, barHeight);

                x += barWidth + 1;
                
                if (x >= this.canvas.width) break;
            }
        };

        draw();
    }

    drawVisualizerIdle() {
        // –†–∏—Å—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.canvasCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.canvasCtx.fillStyle = '#f8f9fa';
        this.canvasCtx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
        this.canvasCtx.fillStyle = '#6c757d';
        this.canvasCtx.font = '16px sans-serif';
        this.canvasCtx.textAlign = 'center';
        this.canvasCtx.fillText('–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–ª—É—à–∞—Ç—å" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞', this.canvas.width / 2, this.canvas.height / 2);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VoiceChat...');
    new VoiceChat();
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞');
    } else {
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞');
    }
});